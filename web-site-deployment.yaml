# This line specifies the API version of Kubernetes that the deployment configuration is compatible with, and the kind of object being defined, which is a Deployment.
apiVersion: apps/v1
kind: Deployment

# The metadata section provides basic information about the deployment object, such as its name.
metadata:
  name: web-site-deployment # The name of the deployment, used to identify it within the Kubernetes cluster.

# The spec (specification) section outlines the desired state of the deployment, including the number of replicas, pod selector, and template for pod creation.
spec:
  replicas: 3 # This specifies the desired number of pod replicas. Kubernetes will attempt to maintain this number of pods running at all times.

  # The selector field is used by the deployment to determine which pods fall under its jurisdiction, based on the labels of the pods.
  selector:
    matchLabels:
      app: web-site # The deployment controls pods with the label 'app' set to 'web-site'.

  # The template field contains the blueprint for creating new pods. The metadata and spec under the template define the configuration of these pods.
  template:
    metadata:
      labels:
        app: web-site # Labels applied to the pods created from this template. These should match the selector above.

    # The spec within the template defines the configuration of the pods, including containers and their properties.
    spec:
      containers:
      - name: nginx-container # The name of the container within each pod. This is just a human-readable identifier.
        image: nginx:latest # The Docker image for the container. This specifies to use the latest version of the official Nginx image.
        ports:
        - containerPort: 80 # The port on which the container will listen for incoming connections. Port 80 is the default port for HTTP.